{"version":3,"file":"static/js/8115.76bd8ca7.chunk.js","mappings":"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","sources":["pages/user/Notifications.tsx"],"sourcesContent":["import { Alert, Box, CircularProgress, List, ListItem, ListItemText, Typography } from '@mui/material';\nimport { motion } from 'framer-motion';\nimport { useEffect, useState } from 'react';\nimport axiosInstance from '../../utils/axiosInstance'; // Sửa đường dẫn\n\ninterface Notification {\n  _id: string;\n  title: string;\n  content: string;\n  isActive: boolean;\n  createdBy: { name: string; email: string } | null; // Cho phép createdBy là null\n  createdAt: Date;\n  isRead?: boolean;\n}\n\nconst Notifications = () => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchNotifications = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      console.log('Token đang sử dụng:', token);\n      if (!token) throw new Error('Token không tồn tại');\n\n      const response = await axiosInstance.get('/api/notifications'); // Sử dụng axiosInstance\n      const fetchedNotifications = response.data.map((notif: any) => ({\n        ...notif,\n        isRead: notif.isRead || false,\n      }));\n      setNotifications(fetchedNotifications);\n    } catch (error: any) {\n      console.error('Lỗi tải thông báo:', error);\n      setError(error.response?.data?.message || 'Không thể tải danh sách thông báo.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (id: string) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('Token không tồn tại');\n\n      await axiosInstance.put(`/api/notifications/${id}/mark-read`, {}); // Sử dụng axiosInstance\n      setNotifications(notifications.map((n) => (n._id === id ? { ...n, isRead: true } : n)));\n    } catch (error: any) {\n      console.error('Lỗi đánh dấu đã đọc:', error);\n      setError(error.response?.data?.message || 'Không thể đánh dấu thông báo là đã đọc.');\n    }\n  };\n\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n\n  return (\n    <Box sx={{ p: { xs: 2, sm: 3, md: 4 }, bgcolor: '#f0f4f8', minHeight: 'calc(100vh - 64px)' }}>\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8, type: 'spring', stiffness: 200, damping: 20 }}\n      >\n        <Typography\n          variant=\"h4\"\n          gutterBottom\n          sx={{\n            fontFamily: 'Poppins, sans-serif',\n            fontWeight: 'bold',\n            color: '#1E3A8A',\n            textShadow: '0 2px 5px rgba(0,0,0,0.1)',\n          }}\n        >\n          Thông báo\n        </Typography>\n      </motion.div>\n\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n          <CircularProgress sx={{ color: '#1E3A8A' }} />\n        </Box>\n      ) : error ? (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      ) : (\n        <List>\n          {notifications.length > 0 ? (\n            notifications.map((notification, index) => (\n              <motion.div\n                key={notification._id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.1, duration: 0.5 }}\n              >\n                <ListItem\n                  sx={{\n                    bgcolor: 'white',\n                    mb: 1,\n                    borderRadius: 2,\n                    boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n                    '&:hover': { bgcolor: 'rgba(0,0,0,0.03)' },\n                  }}\n                  onClick={() => markAsRead(notification._id)}\n                >\n                  <ListItemText\n                    primary={\n                      <Typography\n                        variant=\"h6\"\n                        sx={{ fontFamily: 'Poppins, sans-serif', color: '#1E3A8A', fontWeight: 'bold' }}\n                      >\n                        {notification.title}\n                      </Typography>\n                    }\n                    secondary={\n                      <>\n                        <Typography\n                          sx={{ fontFamily: 'Poppins, sans-serif', color: '#555', mt: 0.5 }}\n                        >\n                          {notification.content}\n                        </Typography>\n                        <Typography\n                          variant=\"caption\"\n                          sx={{ fontFamily: 'Poppins, sans-serif', color: '#777', mt: 0.5 }}\n                        >\n                          Được tạo bởi:{' '}\n                          {notification.createdBy\n                            ? `${notification.createdBy.name} (${notification.createdBy.email})`\n                            : 'Không xác định'}{' '}\n                          - {new Date(notification.createdAt).toLocaleString('vi-VN')}\n                        </Typography>\n                        <Typography\n                          variant=\"caption\"\n                          sx={{\n                            fontFamily: 'Poppins, sans-serif',\n                            color: notification.isActive ? '#2e7d32' : '#d32f2f',\n                            mt: 0.5,\n                          }}\n                        >\n                          Trạng thái: {notification.isActive ? 'Đang hiển thị' : 'Ẩn'}\n                        </Typography>\n                      </>\n                    }\n                  />\n                </ListItem>\n              </motion.div>\n            ))\n          ) : (\n            <Typography sx={{ fontFamily: 'Poppins, sans-serif', color: '#666', textAlign: 'center' }}>\n              Không có thông báo nào.\n            </Typography>\n          )}\n        </List>\n      )}\n    </Box>\n  );\n};\n\nexport default Notifications;"],"names":["Notifications","notifications","setNotifications","useState","loading","setLoading","error","setError","useEffect","async","token","localStorage","getItem","console","log","Error","fetchedNotifications","axiosInstance","get","data","map","notif","_objectSpread","isRead","_error$response","_error$response$data","response","message","fetchNotifications","_jsxs","Box","sx","p","xs","sm","md","bgcolor","minHeight","children","_jsx","motion","div","initial","opacity","y","animate","transition","duration","type","stiffness","damping","Typography","variant","gutterBottom","fontFamily","fontWeight","color","textShadow","display","justifyContent","alignItems","height","CircularProgress","Alert","severity","mb","List","length","notification","index","x","delay","ListItem","borderRadius","boxShadow","onClick","put","concat","id","n","_id","_error$response2","_error$response2$data","markAsRead","ListItemText","primary","title","secondary","_Fragment","mt","content","createdBy","name","email","Date","createdAt","toLocaleString","isActive","textAlign"],"sourceRoot":""}