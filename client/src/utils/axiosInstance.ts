import axios, { AxiosError, InternalAxiosRequestConfig } from 'axios';

const axiosInstance = axios.create({
  baseURL: 'http://localhost:5000/',
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor request: G·∫Øn token v√†o header
axiosInstance.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    const token = localStorage.getItem('token');
    if (token) {
      if (typeof token !== 'string') {
        console.error('‚ùå Token kh√¥ng ph·∫£i l√† chu·ªói:', token);
        throw new Error('Token kh√¥ng h·ª£p l·ªá');
      }
      const cleanToken = token.startsWith('Bearer ') ? token.replace('Bearer ', '') : token;
      // ƒê·∫£m b·∫£o headers lu√¥n ƒë∆∞·ª£c kh·ªüi t·∫°o
      config.headers = config.headers || {};
      config.headers.Authorization = `Bearer ${cleanToken}`;
      console.log('üì§ G·∫Øn token v√†o request:', config.headers.Authorization);
      console.log('üì§ Request URL:', config.url);
    } else {
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token trong localStorage');
    }
    return config;
  },
  (error: AxiosError) => {
    console.error('‚ùå L·ªói trong interceptor request:', error);
    return Promise.reject(error);
  }
);

// Interceptor response: X·ª≠ l√Ω l·ªói 401 v√† l√†m m·ªõi token
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config as InternalAxiosRequestConfig & { _retry?: boolean };
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const token = localStorage.getItem('token');
        if (!token || typeof token !== 'string') {
          throw new Error('Token kh√¥ng h·ª£p l·ªá ƒë·ªÉ l√†m m·ªõi');
        }
        const cleanToken = token.startsWith('Bearer ') ? token.replace('Bearer ', '') : token;
        const response = await axios.post(
          'http://localhost:5000/api/auth/refresh-token',
          { token: cleanToken },
          { headers: { 'Content-Type': 'application/json' } }
        );
        const newToken = response.data.token;
        if (!newToken) {
          throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token m·ªõi t·ª´ server');
        }
        localStorage.setItem('token', newToken);
        console.log('‚úÖ ƒê√£ l√†m m·ªõi token:', newToken);
        originalRequest.headers = originalRequest.headers || {};
        originalRequest.headers.Authorization = `Bearer ${newToken}`;
        return axiosInstance(originalRequest);
      } catch (refreshError: any) {
        console.error('‚ùå L·ªói khi l√†m m·ªõi token:', refreshError.response?.data || refreshError.message);
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }
    console.error('‚ùå L·ªói t·ª´ server:', error.response?.data || error.message);
    return Promise.reject(error);
  }
);

export default axiosInstance;