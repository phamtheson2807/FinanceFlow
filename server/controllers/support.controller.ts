import { Request, Response } from 'express';
import SupportSession from '../models/SupportSession';
import { User } from '../models/User'; // Import type User

export class SupportController {
  static async getChatHistory(req: Request, res: Response) {
    try {
      const userId = req.params.userId;
      if (!userId) {
        return res.status(400).json({ message: 'User ID kh√¥ng h·ª£p l·ªá' });
      }

      const session = await SupportSession.findById(userId);
      if (!session) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi√™n h·ªó tr·ª£ cho user n√†y' });
      }

      res.json({
        sessionId: session._id,
        userId: session.userId,
        messages: session.messages,
        status: session.status,
        unreadCount: session.unreadCount,
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ chat:', error);
      res.status(500).json({ message: 'L·ªói m√°y ch·ªß khi l·∫•y l·ªãch s·ª≠ chat', error: error.message });
    }
  }

  static async getAllSessions(req: Request, res: Response) {
    try {
      const isAdmin = req.user && (req.user as User).role === 'admin';
      let sessions;

      if (isAdmin) {
        // Admin th·∫•y t·∫•t c·∫£ sessions
        sessions = await SupportSession.find().sort({ updatedAt: -1 }).lean();
      } else {
        // User ch·ªâ th·∫•y session c·ªßa ch√≠nh m√¨nh
        sessions = await SupportSession.find({ userId: (req.user as User)._id }).sort({ updatedAt: -1 }).lean();
      }

      res.json({ sessions });
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch sessions:', error);
      res.status(500).json({ message: 'L·ªói m√°y ch·ªß khi l·∫•y danh s√°ch phi√™n h·ªó tr·ª£', error: error.message });
    }
  }

  static async saveMessage(req: Request, res: Response) {
    try {
      const { sessionId, content, sender } = req.body;
      if (!sessionId || !content || !sender) {
        return res.status(400).json({ message: 'Thi·∫øu sessionId, content, ho·∫∑c sender' });
      }

      if (!['user', 'admin'].includes(sender)) {
        return res.status(400).json({ message: 'Sender ph·∫£i l√† "user" ho·∫∑c "admin"' });
      }

      // Ki·ªÉm tra quy·ªÅn g·ª≠i tin nh·∫Øn
      if (sender !== 'admin' && (req.user as User)._id !== sender) {
        return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn v·ªõi vai tr√≤ n√†y' });
      }

      const session = await SupportSession.findById(sessionId);
      if (!session) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi√™n h·ªó tr·ª£' });
      }

      const newMessage = {
        _id: Date.now().toString(),
        sender,
        content,
        createdAt: new Date(),
      };

      session.messages.push(newMessage);
      session.unreadCount = sender === 'admin' ? 0 : session.unreadCount + 1;
      await session.save();

      // L·∫•y io t·ª´ app (gi·∫£ s·ª≠ ƒë√£ g·∫Øn trong index.js)
      const io = req.app.get('socketio');
      if (io) {
        io.to(`support_${sessionId}`).emit('message', newMessage);
        io.to('admin_room').emit('message', { ...newMessage, sessionId });
        console.log(`üì© Ph√°t tin nh·∫Øn qua WebSocket t·ªõi support_${sessionId} v√† admin_room`);
      } else {
        console.error('‚ùå Socket.io kh√¥ng ƒë∆∞·ª£c g·∫Øn v√†o app');
      }

      res.status(201).json({ message: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c l∆∞u', data: newMessage });
    } catch (error) {
      console.error('‚ùå L·ªói khi l∆∞u tin nh·∫Øn:', error);
      res.status(500).json({ message: 'L·ªói m√°y ch·ªß khi l∆∞u tin nh·∫Øn', error: error.message });
    }
  }

  static async updateSession(req: Request, res: Response) {
    try {
      const sessionId = req.params.sessionId;
      const { status } = req.body;

      if (!sessionId) {
        return res.status(400).json({ message: 'Session ID kh√¥ng h·ª£p l·ªá' });
      }

      if (!status || !['active', 'closed'].includes(status)) {
        return res.status(400).json({ message: 'Tr·∫°ng th√°i ph·∫£i l√† "active" ho·∫∑c "closed"' });
      }

      const session = await SupportSession.findById(sessionId);
      if (!session) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi√™n h·ªó tr·ª£' });
      }

      session.status = status;
      session.unreadCount = status === 'closed' ? 0 : session.unreadCount;
      await session.save();

      // Ph√°t c·∫≠p nh·∫≠t tr·∫°ng th√°i qua WebSocket n·∫øu c·∫ßn
      const io = req.app.get('socketio');
      if (io) {
        io.to(`support_${sessionId}`).emit('sessionUpdated', { sessionId, status });
        io.to('admin_room').emit('sessionUpdated', { sessionId, status });
        console.log(`üì° Ph√°t c·∫≠p nh·∫≠t tr·∫°ng th√°i phi√™n ${sessionId} qua WebSocket`);
      }

      res.json({ message: 'Phi√™n h·ªó tr·ª£ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t', data: session });
    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t phi√™n h·ªó tr·ª£:', error);
      res.status(500).json({ message: 'L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t phi√™n h·ªó tr·ª£', error: error.message });
    }
  }
}

export default SupportController;