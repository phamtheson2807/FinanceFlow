const mongoose = require('mongoose');
const EditHistory = require('./models/EditHistory'); // Import model EditHistory

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://localhost:27017/finance-manager')
  .then(async () => {
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
    console.log('EditHistory model:', EditHistory);

    try {
      // Ki·ªÉm tra v√† kh·ªüi t·∫°o collection n·∫øu ch∆∞a t·ªìn t·∫°i
      const collections = await mongoose.connection.db.listCollections().toArray();
      const collectionNames = collections.map((col) => col.name);

      // Ki·ªÉm tra collection 'edithistories'
      if (!collectionNames.includes('edithistories')) {
        console.log('‚ö†Ô∏è Collection edithistories ch∆∞a t·ªìn t·∫°i, kh·ªüi t·∫°o...');
        await EditHistory.createCollection();
      } else {
        console.log('‚úÖ Collection edithistories ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn kh·ªüi t·∫°o');
      }

      // Ki·ªÉm tra t·∫•t c·∫£ b·∫£n ghi trong EditHistory (t√πy ch·ªçn)
      const editHistories = await EditHistory.find();
      console.log(`üîç T√¨m th·∫•y ${editHistories.length} b·∫£n ghi trong EditHistory`);
      editHistories.forEach((history) => {
        console.log(`‚úÖ History ${history._id} - Field: ${history.field}, Old: ${history.oldValue}, New: ${history.newValue}`);
      });

      // ƒê√≥ng k·∫øt n·ªëi
      mongoose.connection.close();
      console.log('‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu:', error);
      mongoose.connection.close();
      process.exit(1);
    }
  })
  .catch((err) => {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err);
    process.exit(1);
  });