const jwt = require('jsonwebtoken');
const User = require('../models/User');
const mongoose = require('mongoose');
const { OAuth2Client } = require('google-auth-library');

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

const authMiddleware = async (req, res, next) => {
  const authHeader = req.headers.authorization || req.header('Authorization') || req.headers['authorization'];
  console.log('üì° Token t·ª´ request (Header):', authHeader || 'Kh√¥ng c√≥ token');

  try {
    if (!authHeader) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y header Authorization');
      return res.status(401).json({ message: 'Kh√¥ng c√≥ token, quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi' });
    }

    const parts = authHeader.split(' ').filter(part => part.trim() && part.toLowerCase() !== 'bearer');
    const token = parts.length > 0 ? parts[parts.length - 1] : null;
    console.log('üì° Token sau khi x·ª≠ l√Ω:', token || 'Kh√¥ng c√≥ token');

    if (!token) {
      console.error('‚ùå Token r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá sau khi x·ª≠ l√Ω');
      return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá - Kh√¥ng t√¨m th·∫•y token' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('üì° Th√¥ng tin t·ª´ token (Decoded):', decoded);

    if (!mongoose.Types.ObjectId.isValid(decoded.id)) {
      console.error('‚ùå ID trong token kh√¥ng ph·∫£i ObjectId h·ª£p l·ªá:', decoded.id);
      return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá - ID kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng' });
    }

    const user = await User.findById(decoded.id).select('-password -resetPasswordToken -resetPasswordExpire');
    if (!user) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y user trong DB v·ªõi ID:', decoded.id);
      return res.status(401).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }

    req.user = {
      _id: user._id.toString(), // Chuy·ªÉn th√†nh chu·ªói
      name: user.name,
      email: user.email,
      role: decoded.role || user.role || 'user',
      plan: decoded.plan || user.plan || 'free',
      isVerified: user.isVerified || false,
      isLocked: user.isLocked || false,
    };

    console.log('üì° User t·ª´ database:', req.user);

    if (!req.user.isVerified) {
      console.error('‚ùå User ch∆∞a x√°c th·ª±c email:', req.user.email);
      return res.status(403).json({ message: 'Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c, vui l√≤ng x√°c th·ª±c email' });
    }

    if (req.user.isLocked) {
      console.error('‚ùå User b·ªã kh√≥a:', req.user.email);
      return res.status(403).json({ message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a, vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n' });
    }

    next();
  } catch (err) {
    console.error('‚ùå L·ªói x√°c th·ª±c token:', {
      message: err.message,
      name: err.name,
      token: authHeader || 'Kh√¥ng c√≥ token',
      stack: err.stack,
    });
    return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn Admin
const isAdmin = (req, res, next) => {
  if (req.user && req.user.role === 'admin') {
    next();
  } else {
    return res.status(403).json({ message: 'Truy c·∫≠p b·ªã t·ª´ ch·ªëi: y√™u c·∫ßu quy·ªÅn admin' });
  }
};

// X·ª≠ l√Ω x√°c th·ª±c Google OAuth2
const googleAuth = async (req, res) => {
  try {
    console.log('üì± Google auth request:', req.body);
    const { credential } = req.body;

    if (!credential) {
      console.error('‚ùå Kh√¥ng c√≥ credential t·ª´ Google');
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin x√°c th·ª±c t·ª´ Google' });
    }

    const ticket = await client.verifyIdToken({
      idToken: credential,
      audience: process.env.GOOGLE_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    console.log('‚úÖ Google verify success:', payload);

    const { email, name, picture, sub: googleId } = payload;

    let user = await User.findOne({ email });

    if (!user) {
      user = new User({
        name,
        email,
        googleId,
        avatar: picture,
        isVerified: true,
        role: 'user',
        plan: 'free',
      });
      await user.save();
      console.log('‚úÖ T·∫°o ng∆∞·ªùi d√πng m·ªõi t·ª´ Google:', email);
    }

    const token = jwt.sign(
      {
        id: user._id.toString(), // Chuy·ªÉn th√†nh chu·ªói
        email: user.email,
        role: user.role,
        plan: user.plan,
      },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token,
      user: {
        id: user._id.toString(), // Chuy·ªÉn th√†nh chu·ªói
        name: user.name,
        email: user.email,
        role: user.role,
        plan: user.plan,
        avatar: user.avatar,
        isVerified: user.isVerified,
      },
    });
  } catch (error) {
    console.error('‚ùå Google auth error:', error);
    res.status(500).json({ message: 'L·ªói x√°c th·ª±c Google: ' + error.message });
  }
};

module.exports = { authMiddleware, isAdmin, googleAuth };