// routes/auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const passport = require('passport');
const User = require('../models/User');
const { authMiddleware } = require('../middleware/auth');
require('../config/passport');
const sendVerificationEmail = require('../utils/sendVerificationEmail');
const sendResetPasswordEmail = require('../utils/sendResetPasswordEmail');
const Notification = require('../models/Notification');

router.post('/register', async (req, res) => {
  try {
    const { name, email, password } = req.body;
    let user = await User.findOne({ email });

    if (user) {
      return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    user = new User({
      name,
      email,
      password: hashedPassword,
      isVerified: false,
      role: 'user',
      isLocked: false,
    });

    await user.save();

    const verificationToken = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: '1d' });
    await sendVerificationEmail(email, verificationToken);
    console.log(`üì© ƒê√£ g·ª≠i email x√°c th·ª±c ƒë·∫øn: ${email}`);

    res.status(201).json({ message: 'T√†i kho·∫£n ƒë√£ t·∫°o, vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c!' });
  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

router.get('/verify-email', async (req, res) => {
  try {
    const { token } = req.query;
    if (!token) return res.status(400).json({ message: 'Token kh√¥ng h·ª£p l·ªá' });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const email = decoded.email;

    console.log(`üì© X√°c th·ª±c email: ${email}`);

    const user = await User.findOneAndUpdate(
      { email },
      { isVerified: true },
      { new: true }
    );

    if (!user) {
      console.error(`‚ùå X√°c th·ª±c th·∫•t b·∫°i: Kh√¥ng t√¨m th·∫•y user v·ªõi email ${email}`);
      return res.status(400).json({ message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!' });
    }

    console.log(`‚úÖ Email ${email} ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c!`);
    res.redirect(`${process.env.CLIENT_URL}/login?verified=true`);
  } catch (error) {
    console.error('‚ùå L·ªói x√°c th·ª±c email:', error);
    res.status(400).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!' });
  }
});

router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    const normalizedEmail = email.trim().toLowerCase();
    console.log(`üîç Email nh·∫≠n t·ª´ request: "${normalizedEmail}"`);

    const user = await User.findOne({ email: normalizedEmail });
    if (!user) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email: ${normalizedEmail}`);
      return res.status(400).json({ message: 'Email kh√¥ng t·ªìn t·∫°i' });
    }

    console.log(`üîç D·ªØ li·ªáu user t·ª´ DB: ${JSON.stringify(user)}`);

    if (user.isLocked) {
      console.log(`‚ùå T√†i kho·∫£n b·ªã kh√≥a: ${normalizedEmail}`);
      return res.status(403).json({ message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.' });
    }

    if (!user.isVerified) {
      console.log(`‚ùå Email ch∆∞a x√°c th·ª±c: ${normalizedEmail}`);
      return res.status(403).json({ message: 'Email ch∆∞a x√°c th·ª±c, vui l√≤ng ki·ªÉm tra email' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.log(`‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng cho email: ${normalizedEmail}`);
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' });
    }

    const token = jwt.sign(
      { id: user._id, email: user.email, role: user.role || 'user' },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token,
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
        role: user.role || 'user',
        isLocked: user.isLocked,
        isVerified: user.isVerified,
        avatar: user.avatar || '',
      },
    });
  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

router.post('/verify-admin', async (req, res) => {
  try {
    const { email } = req.body;

    const user = await User.findOne({ email, role: 'admin' });
    if (!user) {
      return res.status(404).json({ message: 'Admin kh√¥ng t·ªìn t·∫°i!' });
    }

    user.isVerified = true;
    await user.save();

    res.json({ message: `‚úÖ Admin ${email} ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c!` });
  } catch (error) {
    console.error('‚ùå L·ªói x√°c th·ª±c admin:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

router.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      console.error(`‚ùå Email kh√¥ng t·ªìn t·∫°i: ${email}`);
      return res.status(404).json({ message: 'Email kh√¥ng t·ªìn t·∫°i!' });
    }

    const resetToken = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: '15m' });
    await sendResetPasswordEmail(email, resetToken);
    console.log(`üì© ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn: ${email}`);

    res.json({ message: 'Li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o email c·ªßa b·∫°n!' });
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
  }
});

router.post('/reset-password', async (req, res) => {
  try {
    const { token, newPassword } = req.body;
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const email = decoded.email;

    const user = await User.findOne({ email });
    if (!user) {
      console.error(`‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email: ${email}`);
      return res.status(400).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!' });
    }

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    await user.save();
    console.log(`‚úÖ M·∫≠t kh·∫©u c·ªßa ${email} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!`);

    res.json({ message: '‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!' });
  } catch (error) {
    console.error('‚ùå L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
  }
});

router.get('/me', authMiddleware, async (req, res) => {
  try {
    if (!req.user || !req.user._id) {
      return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n' });
    }

    const user = await User.findById(req.user._id).select('-password');
    if (!user) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    if (user.isLocked) {
      return res.status(403).json({ message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.' });
    }

    res.json({
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
        role: user.role || 'user',
        isLocked: user.isLocked,
        isVerified: user.isVerified,
        avatar: user.avatar || '',
        createdAt: user.createdAt,
      },
    });
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

router.put('/update', authMiddleware, async (req, res) => {
  try {
    const { name, email, avatar } = req.body;
    if (!req.user || !req.user._id) {
      return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n' });
    }

    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    if (email && email !== user.email) {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
      }
      user.email = email;
      user.isVerified = false;
      const verificationToken = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: '1d' });
      await sendVerificationEmail(email, verificationToken);
      console.log(`üì© ƒê√£ g·ª≠i email x√°c th·ª±c m·ªõi ƒë·∫øn: ${email}`);
    }

    if (name) user.name = name;
    if (avatar) user.avatar = avatar;

    await user.save();
    console.log(`‚úÖ Th√¥ng tin ng∆∞·ªùi d√πng ${user.email} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!`);

    res.json({
      message: 'Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!',
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
        role: user.role || 'user',
        isLocked: user.isLocked,
        isVerified: user.isVerified,
        avatar: user.avatar || '',
      },
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

router.put('/change-password', authMiddleware, async (req, res) => {
  try {
    console.log('üì° Request body:', req.body);
    const { currentPassword, newPassword } = req.body;
    if (!req.user || !req.user._id) {
      return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n' });
    }

    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u hi·ªán t·∫°i v√† m·∫≠t kh·∫©u m·ªõi' });
    }

    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng' });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±' });
    }

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    await user.save();
    console.log(`‚úÖ M·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng ${user.email} ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!`);

    res.json({ message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!' });
  } catch (error) {
    console.error('‚ùå L·ªói khi thay ƒë·ªïi m·∫≠t kh·∫©u:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

// Comment out Google OAuth routes for now
/*
router.get('/google', passport.authenticate('google', {
  scope: ['profile', 'email']
}));

router.get('/google/callback', passport.authenticate('google', {
  failureRedirect: `${process.env.CLIENT_URL}/login?error=OAuthFail`,
  session: false
}), async (req, res) => {
  try {
    const user = req.user;
    if (!user) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y user t·ª´ Google OAuth');
      return res.redirect(`${process.env.CLIENT_URL}/login?error=OAuthFail`);
    }

    if (user.isLocked) {
      console.error(`‚ùå T√†i kho·∫£n ${user.email} ƒë√£ b·ªã kh√≥a`);
      return res.redirect(`${process.env.CLIENT_URL}/login?error=AccountLocked`);
    }

    const token = jwt.sign(
      { id: user._id, email: user.email, role: user.role || 'user' },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );
    console.log(`‚úÖ ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng cho ${user.email}, token: ${token}`);
    res.redirect(`${process.env.CLIENT_URL}/oauth-success?token=${token}`);
  } catch (error) {
    console.error('‚ùå Google OAuth Error:', error);
    res.redirect(`${process.env.CLIENT_URL}/login?error=OAuthFail`);
  }
});
*/

// Th√™m route POST /logout
router.post('/logout', authMiddleware, async (req, res) => {
  try {
    if (!req.user || !req.user._id) {
      return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n' });
    }

    console.log(`‚úÖ Ng∆∞·ªùi d√πng ${req.user.email} ƒë√£ ƒëƒÉng xu·∫•t`);
    res.json({ message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng xu·∫•t:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

router.post('/refresh-token', async (req, res) => {
  const { token } = req.body;
  if (!token) return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá' });

  try {
    jwt.verify(token, process.env.JWT_REFRESH_SECRET, (err, user) => {
      if (err) return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá' });

      const newToken = jwt.sign(
        { id: user.id, role: user.role || 'user' },
        process.env.JWT_SECRET,
        { expiresIn: '1h' }
      );
      res.json({ token: newToken });
    });
  } catch (error) {
    console.error('‚ùå L·ªói refresh token:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

module.exports = router;