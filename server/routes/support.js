const express = require('express');
const nodemailer = require('nodemailer');
const Message = require('../models/Message');
const { authMiddleware, isAdmin } = require('../middleware/auth');
const router = express.Router();

// C·∫•u h√¨nh Nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

/**
 * @swagger
 * /api/support/send:
 *   post:
 *     summary: G·ª≠i tin nh·∫Øn h·ªó tr·ª£ t·ª´ ng∆∞·ªùi d√πng (kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p)
 *     tags: [Support]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               fullName:
 *                 type: string
 *               contact:
 *                 type: string
 *               message:
 *                 type: string
 *             required:
 *               - fullName
 *               - contact
 *     responses:
 *       200:
 *         description: Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng
 *       400:
 *         description: Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc
 *       500:
 *         description: L·ªói server
 */
router.post('/send', async (req, res) => {
  const { fullName, contact, message } = req.body;

  if (!fullName || !contact) {
    return res.status(400).json({ message: 'H·ªç t√™n v√† email/s·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc' });
  }

  try {
    // L∆∞u tin nh·∫Øn v√†o MongoDB
    const newMessage = new Message({ fullName, contact, message });
    await newMessage.save();

    // ƒê·ªãnh d·∫°ng th·ªùi gian g·ª≠i tin nh·∫Øn
    const sentAt = new Date().toLocaleString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      dateStyle: 'medium',
      timeStyle: 'short',
    });

    // N·ªôi dung plain text (d·ª± ph√≤ng cho c√°c email client kh√¥ng h·ªó tr·ª£ HTML)
    const textContent = `
H·ªç t√™n: ${fullName}
Li√™n h·ªá: ${contact}
Th·ªùi gian g·ª≠i: ${sentAt}
Tin nh·∫Øn: ${message || 'Kh√¥ng c√≥ n·ªôi dung'}
    `;

    // Thi·∫øt k·∫ø n·ªôi dung email d∆∞·ªõi d·∫°ng HTML
    const htmlContent = `
      <div style="font-family: 'Poppins', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8fafc; border-radius: 10px;">
        <!-- Header -->
        <div style="text-align: center; padding: 20px; background: linear-gradient(45deg, #A78BFA, #60A5FA); border-radius: 10px 10px 0 0;">
          <h1 style="color: #ffffff; font-size: 24px; margin: 0;">Tin Nh·∫Øn H·ªó Tr·ª£ M·ªõi T·ª´ Kh√°ch H√†ng</h1>
        </div>

        <!-- Body -->
        <div style="padding: 20px; background-color: #ffffff; border-radius: 0 0 10px 10px;">
          <p style="color: #1E293B; font-size: 16px; margin: 0 0 10px;">Ch√†o Admin,</p>
          <p style="color: #1E293B; font-size: 16px; margin: 0 0 20px;">B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c m·ªôt tin nh·∫Øn h·ªó tr·ª£ m·ªõi t·ª´ kh√°ch h√†ng. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin chi ti·∫øt:</p>

          <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
            <tr>
              <td style="padding: 10px; font-weight: 600; color: #A78BFA; font-size: 16px; border-bottom: 1px solid #E5E7EB;">H·ªç t√™n:</td>
              <td style="padding: 10px; color: #64748B; font-size: 16px; border-bottom: 1px solid #E5E7EB;">${fullName}</td>
            </tr>
            <tr>
              <td style="padding: 10px; font-weight: 600; color: #A78BFA; font-size: 16px; border-bottom: 1px solid #E5E7EB;">Li√™n h·ªá:</td>
              <td style="padding: 10px; color: #64748B; font-size: 16px; border-bottom: 1px solid #E5E7EB;">${contact}</td>
            </tr>
            <tr>
              <td style="padding: 10px; font-weight: 600; color: #A78BFA; font-size: 16px; border-bottom: 1px solid #E5E7EB;">Th·ªùi gian g·ª≠i:</td>
              <td style="padding: 10px; color: #64748B; font-size: 16px; border-bottom: 1px solid #E5E7EB;">${sentAt}</td>
            </tr>
            <tr>
              <td style="padding: 10px; font-weight: 600; color: #A78BFA; font-size: 16px; vertical-align: top;">Tin nh·∫Øn:</td>
              <td style="padding: 10px; color: #64748B; font-size: 16px;">${message || 'Kh√¥ng c√≥ n·ªôi dung'}</td>
            </tr>
          </table>

          <p style="color: #1E293B; font-size: 16px; margin: 0;">Vui l√≤ng ph·∫£n h·ªìi kh√°ch h√†ng trong th·ªùi gian s·ªõm nh·∫•t.</p>
        </div>

        <!-- Footer -->
        <div style="text-align: center; padding: 20px; background-color: #1E293B; border-radius: 0 0 10px 10px; margin-top: 10px;">
          <p style="color: #CBD5E1; font-size: 14px; margin: 0 0 5px;">FinanceFlow - Qu·∫£n L√Ω T√†i Ch√≠nh D·ªÖ D√†ng</p>
          <p style="color: #CBD5E1; font-size: 14px; margin: 0;">
            Email: <a href="mailto:support@financeflow.com" style="color: #60A5FA; text-decoration: none;">support@financeflow.com</a> | Hotline: 0123-456-789
          </p>
          <p style="color: #64748B; font-size: 12px; margin: 10px 0 0;">¬© 2025 FinanceFlow. All rights reserved.</p>
        </div>
      </div>
    `;

    // G·ª≠i email ƒë·∫øn admin
    const mailOptions = {
      from: `"FinanceFlow Support" <${process.env.EMAIL_USER}>`,
      to: process.env.ADMIN_EMAIL,
      subject: `Tin Nh·∫Øn H·ªó Tr·ª£ M·ªõi T·ª´ ${fullName} - FinanceFlow`,
      text: textContent, // N·ªôi dung plain text d·ª± ph√≤ng
      html: htmlContent, // N·ªôi dung HTML ch√≠nh
    };

    // G·ª≠i email v√† ki·ªÉm tra k·∫øt qu·∫£
    const info = await transporter.sendMail(mailOptions);
    console.log(`üìß ƒê√£ g·ª≠i email h·ªó tr·ª£ t·ª´ ${fullName} ƒë·∫øn admin. Message ID: ${info.messageId}`);

    res.status(200).json({ message: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:', error);
    res.status(500).json({ message: 'L·ªói server khi g·ª≠i tin nh·∫Øn', error: error.message });
  }
});

/**
 * @swagger
 * /api/support/messages:
 *   get:
 *     summary: L·∫•y danh s√°ch tin nh·∫Øn h·ªó tr·ª£ (Admin only)
 *     tags: [Support]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Danh s√°ch tin nh·∫Øn
 *       401:
 *         description: Kh√¥ng c√≥ token ho·∫∑c token kh√¥ng h·ª£p l·ªá
 *       403:
 *         description: Kh√¥ng c√≥ quy·ªÅn admin
 *       500:
 *         description: L·ªói server
 */
router.get('/messages', authMiddleware, isAdmin, async (req, res) => {
  try {
    const messages = await Message.find().sort({ createdAt: -1 });
    res.status(200).json(messages);
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch tin nh·∫Øn:', error);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y tin nh·∫Øn' });
  }
});

module.exports = router;